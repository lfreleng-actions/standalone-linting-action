---
# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: 2025 The Linux Foundation

# standalone-linting-action
name: '‚õîÔ∏è Standalone Linting Action'
description: 'Runs linting tools that do NOT run under pre-commit.ci'

inputs:
  # Optional
  config_url:
    description: 'Download URL for pre-commit linting configuration file'
    type: 'string'
    required: false
  dependencies_url:
    description: 'Download location for additional Python dependencies'
    type: 'string'
    required: false
  branch_name:
    # Prevents linting errors that mandate changes be made on a branch
    description: 'Checkout this branch name prior to running linting'
    type: 'string'
  path_prefix:
    description: 'Directory location containing project code'
    required: false
    type: 'string'
    default: '.'
  no_checkout:
    description: 'Do not checkout local repository; used for testing'
    type: 'boolean'
    required: false
    default: false
  python-version:
    # Only used when pyproject.toml file not present
    description: 'Python version used to run pre-commit hooks'
    type: 'string'
    required: false
    default: '3.12'

runs:
  using: 'composite'
  steps:
    - name: 'Checkout repository'
      # yamllint disable-line rule:line-length
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      if: inputs.no_checkout != 'true'

    - name: 'Check path_prefix directory'
      if: inputs.path_prefix != '.'
      shell: bash
      run: |
        if [ ! -d "${{ inputs.path_prefix }}" ]; then
          echo 'Error: path_prefix is not a valid directory ‚ùå'
          echo "${{ inputs.path_prefix }}"
          exit 1
        fi

    - name: 'Cache pip packages'
      uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    # yamllint disable-line rule:line-length
    - uses: lfreleng-actions/path-check-action@aa7dabfa92e50e31a0f091dd3e2741692e8dde07 # v0.1.5
      id: pyproject-toml
      with:
        path: "${{ inputs.path_prefix }}/pyproject.toml"

    - name: 'Set up Python [pyproject.toml]'
      if: steps.pyproject-toml.outputs.type == 'file'
      # yamllint disable-line rule:line-length
      uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
      with:
        python-version-file: "${{ inputs.path_prefix }}/pyproject.toml"

    - name: "Setup Python ${{ inputs.python-version }}"
      # yamllint disable-line rule:line-length
      uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
      with:
        python-version: "${{ inputs.python-version }}"

    - name: 'Install pre-commit'
      shell: bash
      run:
        # Install pre-commit
        pip install --disable-pip-version-check pre-commit

    - name: 'Download Python dependencies configuration'
      if: inputs.dependencies_url != ''
      # yamllint disable-line rule:line-length
      uses: lfreleng-actions/url-download-action@ece51fd0f08fd2db2eda53b1acd06c4747336c16 # v0.1.3
      with:
        url: "${{ inputs.dependencies_url }}"
        path: '/tmp/requirements.txt'

    - name: 'Install additional Python dependencies'
      if: inputs.dependencies_url != ''
      shell: bash
      run:
        # Install additional Python dependencies
        pip install --disable-pip-version-check -r /tmp/requirements.txt

    - name: 'Download remote pre-commit configuration'
      # yamllint disable-line rule:line-length
      if: inputs.config_url != ''
      # yamllint disable-line rule:line-length
      uses: lfreleng-actions/url-download-action@ece51fd0f08fd2db2eda53b1acd06c4747336c16 # v0.1.3
      with:
        url: "${{ inputs.config_url }}"
        # Will overwrite existing file; upstream action uses "wget -O" flag
        path: '.pre-commit-config.yaml'
        exit_on_fail: true

    - name: 'Validate linting configuration'
      shell: bash
      run: |
        # Validate linting configuration
        if [ "${{ inputs.path_prefix }}" != '.' ]; then
          cd "${{ inputs.path_prefix }}"
        fi
        if [ -n "${{ inputs.branch_name }}" ]; then
          echo "Checking out Git branch: ${{ inputs.branch_name }} üí¨"
          git checkout -b "${{ inputs.branch_name }}"
        fi
        pre-commit validate-config

    - name: 'Run all pre-commit hooks'
      shell: bash
      run: |
        # Run all pre-commit hooks
        if [ "${{ inputs.path_prefix }}" != '.' ]; then
          cd "${{ inputs.path_prefix }}"
        fi
        pre-commit run -a
